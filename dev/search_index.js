var documenterSearchIndex = {"docs":
[{"location":"api/#API-(Exported-Functions)","page":"API","title":"API (Exported Functions)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Dedisp]\nOrder = [:function,:type]\nPrivate = false","category":"page"},{"location":"api/#Dedisp.dedisp!-Union{Tuple{C}, Tuple{A}, Tuple{CUDA.CuArray{A, 2}, Any, CUDA.CuArray{C, 2}}} where {A, C}","page":"API","title":"Dedisp.dedisp!","text":"dedisp!(output,source,plan)\n\nDedisperses dynamic spectra source in-place into output according to the dedispersion plan plan.\n\nsource has dimensions time samples x frequency channels\noutput has dimensions starting time samples x DM trials\nplan has dimensions frequency channels x DM trials\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.dedisp!-Union{Tuple{C}, Tuple{A}, Tuple{CUDA.CuArray{A, 3}, Any, CUDA.CuArray{C, 3}}} where {A, C}","page":"API","title":"Dedisp.dedisp!","text":"dedisp!(output, source, chunked_plan)\n\nIdentical to dedisp! except operates on chunked plans. Returned is the reduced output.\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.plan_chunked_dedisp-NTuple{5, Any}","page":"API","title":"Dedisp.plan_chunked_dedisp","text":"plan_chunked_dedisp(freqs, f_max, dms, δt, n_chunk)\n\n(GPU-Only) Identical to plan_dedisp except chunks the frequencies by n_chunk.\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.plan_dedisp-NTuple{4, Any}","page":"API","title":"Dedisp.plan_dedisp","text":"plan_dedisp(freqs, f_max, dms, δt)\n\nCreate a dedispersion plan for that covers pulses dispersed over freqs with a maximum of f_max in MHz over all possible DMs in dms with source time resolution δt\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.standardize-Tuple{Any}","page":"API","title":"Dedisp.standardize","text":"standardize(A)\n\nTransform matrix A into units of signal to noise ratio along optional dimension dim, defaulting to the first dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.Δt-NTuple{4, Any}","page":"API","title":"Dedisp.Δt","text":"Δt(f_min, f_max, DM, δt)\n\nGiven two frequency bounds, f_min and f_max in MHz, get the time shift in samples for a dispersed pulse of dispersion measure DM.\n\n\n\n\n\n","category":"method"},{"location":"api/#Dedisp.Δt-Tuple{Any, Any, Any}","page":"API","title":"Dedisp.Δt","text":"Δt(f_min, f_max, DM)\n\nGiven two frequency bounds, f_min and f_max in MHz, get the time shift in seconds for a dispersed pulse of dispersion measure DM.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Dedisp","category":"page"},{"location":"#Dedisp","page":"Home","title":"Dedisp","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Dedisp.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main exported method is dedisp which performs the incoherent dedispersion. TODO write more here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the GPU-side, there is a frequency-chunked version which sums the various frequency channels in parallel then does a block reduction. For certain sizes of input, this may be more performant, but the frequency axis has to be quite big to get over the block scheduling overhead.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"api.md\"]\nDepth = 3","category":"page"}]
}
